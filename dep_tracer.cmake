function(validate_shell_script_extension FILE)
    set(ALLOWED_EXTENSIONS "sh")
    if(WIN32)
        set(ALLOWED_EXTENSIONS "cmd|bat|ps1")  # Add other extensions as needed
    endif()
    string(REGEX MATCH "\\.(${ALLOWED_EXTENSIONS})$" EXT_VALIDATION_RESULT ${FILE})
    if(NOT EXT_VALIDATION_RESULT)
        
        if(WIN32)
            message(FATAL_ERROR "The allowed extensions are: \".cmd\", \".bat\" and \".ps1\"")
        else()
            message(FATAL_ERROR "The only allowed extensions is: \".sh\"")
        endif()
    endif()
endfunction()

function(set_shell_program SCRIPT_FILENAME)
    set(SCRIPT_RUNNER "bash" PARENT_SCOPE)
    set(SCRIPT_ARG -c PARENT_SCOPE)
    if(WIN32)
        set(CMD_EXTENSIONS "cmd|bat")
        string(REGEX MATCH "\\.(${CMD_EXTENSIONS})$" IS_CMD ${SCRIPT_FILENAME})
        if(IS_CMD)
            set(SCRIPT_RUNNER "cmd" PARENT_SCOPE)
            set(SCRIPT_ARG "/c" PARENT_SCOPE)
        else()
            set(SCRIPT_RUNNER "powershell" PARENT_SCOPE)
            set(SCRIPT_ARG "-File" PARENT_SCOPE)
        endif()
    endif()
endfunction()

macro(trace_dependency)
    set(oneValueArgs "INSTALL_SCRIPT" "NAME" "VERSION")
    set(multiValueArgs "COMPONENTS")
    cmake_parse_arguments(PACKAGE_CONTROLLER "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if((NOT DEFINED PACKAGE_CONTROLLER_NAME) OR (NOT DEFINED PACKAGE_CONTROLLER_INSTALL_SCRIPT))
        message(FATAL_ERROR "NAME and INSTALL_SCRIPT are required arguments")
    endif()

    set(VERSION_ARG)
    if(DEFINED ${PACKAGE_CONTROLLER_VERSION})
        set(VERSION_ARG VERSION)
    endif()
    
    find_package(${PACKAGE_CONTROLLER_NAME} ${VERSION_ARG} ${PACKAGE_CONTROLLER_VERSION} COMPONENTS ${PACKAGE_CONTROLLER_COMPONENTS})
    list(LENGTH PACKAGE_CONTROLLER_COMPONENTS NUMBER_OF_COMPONENTS)

    if(NUMBER_OF_COMPONENTS EQUAL 0)
        if(${PACKAGE_CONTROLLER_NAME}_FOUND)
            message(STATUS "${PACKAGE_CONTROLLER_NAME} was found")
        else()
            download_package(${PACKAGE_CONTROLLER_INSTALL_SCRIPT})
        endif()
    else()
        foreach(COMPONENT IN LISTS PACKAGE_CONTROLLER_COMPONENTS)
            if(NOT ${PACKAGE_CONTROLLER_NAME}${COMPONENT}_FOUND)
                download_package(${PACKAGE_CONTROLLER_INSTALL_SCRIPT})
                find_package(${PACKAGE_CONTROLLER_NAME} ${VERSION_ARG} ${PACKAGE_CONTROLLER_VERSION} COMPONENTS ${PACKAGE_CONTROLLER_COMPONENTS})
            else()
                message(STATUS "${PACKAGE_CONTROLLER_NAME}${COMPONENT} was found")
            endif()
        endforeach()
    endif()
    
    find_package(${PACKAGE_CONTROLLER_NAME} ${VERSION_ARG} ${PACKAGE_CONTROLLER_VERSION} COMPONENTS ${PACKAGE_CONTROLLER_COMPONENTS} REQUIRED)

endmacro()

macro(download_package INSTALL_SCRIPT)
    validate_shell_script_extension(${INSTALL_SCRIPT})
    set_shell_program(${INSTALL_SCRIPT})
    execute_process(COMMAND ${SCRIPT_RUNNER} ${SCRIPT_ARG} ${INSTALL_SCRIPT} ${CMAKE_BUILD_TYPE} ${CMAKE_INSTALL_PREFIX} ${PROJECT_SOURCE_DIR})
endmacro(download_package)