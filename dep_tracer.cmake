function(validate_shell_script_extension FILE)
    set(ALLOWED_EXTENSIONS "sh|py")
    if(WIN32)
        set(ALLOWED_EXTENSIONS "cmd|bat|ps1|py")  # Add other extensions as needed
    endif()
    string(REGEX MATCH "\\.(${ALLOWED_EXTENSIONS})$" EXT_VALIDATION_RESULT ${FILE})
    if(NOT EXT_VALIDATION_RESULT)
        
        if(WIN32)
            message(FATAL_ERROR "The allowed extensions are: \".cmd\", \".bat\", \".ps1\" and \".py\"")
        else()
            message(FATAL_ERROR "The only allowed extensions are: \".sh\" and \".py\"")
        endif()
    endif()
endfunction()

function(set_shell_program SCRIPT_FILENAME)
    # Get the file extension
    get_filename_component(SCRIPT_EXT "${SCRIPT_FILENAME}" EXT)
    string(TOLOWER "${SCRIPT_EXT}" SCRIPT_EXT)
    string(REPLACE "." "" SCRIPT_EXT "${SCRIPT_EXT}")


    set(SCRIPT_RUNNER "bash")
    set(SCRIPT_ARG "")

    if(SCRIPT_EXT STREQUAL "py")
        set(SCRIPT_RUNNER "python")
        set(SCRIPT_ARG "")
    endif()

    if(WIN32)
        if(SCRIPT_EXT STREQUAL "cmd" OR SCRIPT_EXT STREQUAL "bat")
            set(SCRIPT_RUNNER "cmd")
            set(SCRIPT_ARG "/c")
        elseif(SCRIPT_EXT STREQUAL "ps1")
            set(SCRIPT_RUNNER "powershell")
            set(SCRIPT_ARG "-File")
        endif()
    endif()

    # Export to parent scope
    set(SCRIPT_RUNNER "${SCRIPT_RUNNER}" PARENT_SCOPE)
    set(SCRIPT_ARG "${SCRIPT_ARG}" PARENT_SCOPE)
endfunction()

macro(trace_dependency)
    set(oneValueArgs "INSTALL_SCRIPT" "NAME" "VERSION" "COMPONENT_INFIX")
    set(options "USE_VSTOOLS" "LIMIT_SEARCH_PATHS")
    set(multiValueArgs "COMPONENTS")
    cmake_parse_arguments(PACKAGE_CONTROLLER "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if((NOT DEFINED PACKAGE_CONTROLLER_NAME) OR (NOT DEFINED PACKAGE_CONTROLLER_INSTALL_SCRIPT))
        message(FATAL_ERROR "NAME and INSTALL_SCRIPT are required arguments")
    endif()

    if((NOT DEFINED PACKAGE_CONTROLLER_COMPONENT_INFIX))
        set(PACKAGE_CONTROLLER_COMPONENT_INFIX)
    endif()

    set(TREATED_USE_VSTOOLS FALSE)
    if((DEFINED PACKAGE_CONTROLLER_USE_VSTOOLS) AND MSVC)
        set(TREATED_USE_VSTOOLS TRUE)
    endif()

    set(TREATED_LIMIT_SEARCH_PATHS FALSE)
    if(DEFINED PACKAGE_CONTROLLER_LIMIT_SEARCH_PATHS)
        set(TREATED_LIMIT_SEARCH_PATHS TRUE)
    endif()

    set(VERSION_ARG)
    if(DEFINED ${PACKAGE_CONTROLLER_VERSION})
        set(VERSION_ARG VERSION)
    endif()
    
    if(TREATED_LIMIT_SEARCH_PATHS)
        find_package(${PACKAGE_CONTROLLER_NAME} ${VERSION_ARG} ${PACKAGE_CONTROLLER_VERSION} COMPONENTS ${PACKAGE_CONTROLLER_COMPONENTS} PATHS ${CMAKE_INSTALL_PREFIX} NO_DEFAULT_PATH)
    else()
        find_package(${PACKAGE_CONTROLLER_NAME} ${VERSION_ARG} ${PACKAGE_CONTROLLER_VERSION} COMPONENTS ${PACKAGE_CONTROLLER_COMPONENTS})
    endif()    
    list(LENGTH PACKAGE_CONTROLLER_COMPONENTS NUMBER_OF_COMPONENTS)

    if(NUMBER_OF_COMPONENTS EQUAL 0)
        if(${PACKAGE_CONTROLLER_NAME}_FOUND)
            message(STATUS "${PACKAGE_CONTROLLER_NAME} was found")
        else()
            download_package(${PACKAGE_CONTROLLER_INSTALL_SCRIPT} ${TREATED_USE_VSTOOLS})
        endif()
    else()
        set(ALL_COMPONENTS_FOUND "${PACKAGE_CONTROLLER_COMPONENTS}" ON)
        foreach(COMPONENT IN LISTS PACKAGE_CONTROLLER_COMPONENTS)
            if(NOT ${PACKAGE_CONTROLLER_NAME}${PACKAGE_CONTROLLER_COMPONENT_INFIX}${COMPONENT}_FOUND)
                set(ALL_COMPONENTS_FOUND OFF)
            endif()
        endforeach()
        if(ALL_COMPONENTS_FOUND)
            message(STATUS "${PACKAGE_CONTROLLER_NAME} was found, with all components")
        else()
            download_package(${PACKAGE_CONTROLLER_INSTALL_SCRIPT} ${TREATED_USE_VSTOOLS})
        endif()
    endif()
    
    if(TREATED_LIMIT_SEARCH_PATHS)
        find_package(${PACKAGE_CONTROLLER_NAME} ${VERSION_ARG} ${PACKAGE_CONTROLLER_VERSION} COMPONENTS ${PACKAGE_CONTROLLER_COMPONENTS} PATHS ${CMAKE_INSTALL_PREFIX} NO_DEFAULT_PATH REQUIRED)
    else()
        find_package(${PACKAGE_CONTROLLER_NAME} ${VERSION_ARG} ${PACKAGE_CONTROLLER_VERSION} COMPONENTS ${PACKAGE_CONTROLLER_COMPONENTS} REQUIRED)
    endif()

endmacro()

macro(trace_library)
    set(oneValueArgs "INSTALL_SCRIPT" "NAME")
    set(multiValueArgs "COMPONENTS")
    set(options "USE_VSTOOLS" "LIMIT_SEARCH_PATHS")
    cmake_parse_arguments(LIBRARY_CONTROLLER "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if((NOT DEFINED LIBRARY_CONTROLLER_NAME) OR (NOT DEFINED LIBRARY_CONTROLLER_INSTALL_SCRIPT))
        message(FATAL_ERROR "NAME and INSTALL_SCRIPT are required arguments")
    endif()
    
    set(TREATED_USE_VSTOOLS FALSE)
    if((DEFINED PACKAGE_CONTROLLER_USE_VSTOOLS) AND MSVC)
        set(TREATED_USE_VSTOOLS TRUE)
    endif()

    set(TREATED_LIMIT_SEARCH_PATHS FALSE)
    if(DEFINED LIBRARY_CONTROLLER_LIMIT_SEARCH_PATHS)
        set(TREATED_LIMIT_SEARCH_PATHS TRUE)
    endif()

    if(TREATED_LIMIT_SEARCH_PATHS)
        find_library(${LIBRARY_CONTROLLER_NAME}_FOUND NAMES ${LIBRARY_CONTROLLER_NAME} PATHS ${CMAKE_INSTALL_PREFIX}/lib NO_DEFAULT_PATH)
    else()
        find_library(${LIBRARY_CONTROLLER_NAME}_FOUND NAMES ${LIBRARY_CONTROLLER_NAME} PATHS ${CMAKE_INSTALL_PREFIX}/lib)
    endif()
    
    if(NOT ${LIBRARY_CONTROLLER_NAME}_FOUND)
        download_package(${LIBRARY_CONTROLLER_INSTALL_SCRIPT} ${TREATED_USE_VSTOOLS})
    else()
        message(STATUS "${LIBRARY_CONTROLLER_NAME} was found")
    endif()
    
    if(TREATED_LIMIT_SEARCH_PATHS)
        find_library(${LIBRARY_CONTROLLER_NAME}_FOUND NAMES ${LIBRARY_CONTROLLER_NAME} PATHS ${CMAKE_INSTALL_PREFIX}/lib NO_DEFAULT_PATH REQUIRED)
    else()
        find_library(${LIBRARY_CONTROLLER_NAME}_FOUND NAMES ${LIBRARY_CONTROLLER_NAME} PATHS ${CMAKE_INSTALL_PREFIX}/lib REQUIRED)
    endif()


endmacro()

macro(trace_file)
    set(oneValueArgs "INSTALL_SCRIPT" "LOCATION" "NAME" "EXTENSION")
    set(multiValueArgs "COMPONENTS")
    set(options "LIMIT_SEARCH_PATHS")
    cmake_parse_arguments(FILE_CONTROLLER "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if((NOT DEFINED FILE_CONTROLLER_NAME) OR (NOT DEFINED FILE_CONTROLLER_INSTALL_SCRIPT) OR (NOT DEFINED FILE_CONTROLLER_LOCATION) OR (NOT DEFINED FILE_CONTROLLER_EXTENSION))
        message(FATAL_ERROR "NAME, INSTALL_SCRIPT, LOCATION and EXTENSION are required arguments")
    endif()

    set(TREATED_LIMIT_SEARCH_PATHS FALSE)
    if(DEFINED FILE_CONTROLLER_LIMIT_SEARCH_PATHS)
        set(TREATED_LIMIT_SEARCH_PATHS TRUE)
    endif()

    set(CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH FALSE)
    
    if(TREATED_LIMIT_SEARCH_PATHS)
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION} NO_DEFAULT_PATH)
    else()
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION})
    endif()
    
    if(NOT ${FILE_CONTROLLER_NAME}_FOUND)
        download_file(${FILE_CONTROLLER_INSTALL_SCRIPT})
    else()
        message(STATUS "${FILE_CONTROLLER_NAME} was found")
    endif()
    
    if(TREATED_LIMIT_SEARCH_PATHS)
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION} NO_DEFAULT_PATH REQUIRED)
    else()
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION} REQUIRED)
    endif()
    
    set(CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH TRUE)

endmacro()

macro(trace_installable_file)
    set(oneValueArgs "INSTALL_SCRIPT" "LOCATION" "NAME" "EXTENSION")
    set(multiValueArgs "COMPONENTS")
    set(options "LIMIT_SEARCH_PATHS")
    cmake_parse_arguments(FILE_CONTROLLER "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if((NOT DEFINED FILE_CONTROLLER_NAME) OR (NOT DEFINED FILE_CONTROLLER_INSTALL_SCRIPT) OR (NOT DEFINED FILE_CONTROLLER_LOCATION) OR (NOT DEFINED FILE_CONTROLLER_EXTENSION))
        message(FATAL_ERROR "NAME, INSTALL_SCRIPT, LOCATION and EXTENSION are required arguments")
    endif()

    set(TREATED_LIMIT_SEARCH_PATHS FALSE)
    if(DEFINED FILE_CONTROLLER_LIMIT_SEARCH_PATHS)
        set(TREATED_LIMIT_SEARCH_PATHS TRUE)
    endif()

    set(CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH FALSE)
    
    if(TREATED_LIMIT_SEARCH_PATHS)
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION} NO_DEFAULT_PATH)
    else()
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION})
    endif()

    if(NOT ${FILE_CONTROLLER_NAME}_FOUND)
        download_package(${FILE_CONTROLLER_INSTALL_SCRIPT} FALSE)
    else()
        message(STATUS "${FILE_CONTROLLER_NAME} was found")
    endif()
    
    if(TREATED_LIMIT_SEARCH_PATHS)
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION} NO_DEFAULT_PATH REQUIRED)
    else()
        find_file(${FILE_CONTROLLER_NAME}_FOUND NAMES "${FILE_CONTROLLER_NAME}.${FILE_CONTROLLER_EXTENSION}" PATHS ${FILE_CONTROLLER_LOCATION} REQUIRED)
    endif()

    set(CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH TRUE)

endmacro()

macro(download_package INSTALL_SCRIPT USE_VSTOOLS)
    validate_shell_script_extension(${INSTALL_SCRIPT})
    set_shell_program(${INSTALL_SCRIPT})
    set(PROJECT_BUILD_TYPE ${CMAKE_BUILD_TYPE})
    if(PROJECT_BUILD_TYPE STREQUAL "RelWithDebInfo")
        set(PROJECT_BUILD_TYPE "Release")
    endif()
    if(${USE_VSTOOLS})
        execute_process(COMMAND ${SCRIPT_RUNNER} ${SCRIPT_ARG} ${INSTALL_SCRIPT} ${PROJECT_BUILD_TYPE} ${CMAKE_INSTALL_PREFIX} ${PROJECT_SOURCE_DIR} ${CMAKE_C_COMPILER})
    else()
        execute_process(COMMAND ${SCRIPT_RUNNER} ${SCRIPT_ARG} ${INSTALL_SCRIPT} ${PROJECT_BUILD_TYPE} ${CMAKE_INSTALL_PREFIX} ${PROJECT_SOURCE_DIR})
    endif()
endmacro(download_package)

macro(download_file INSTALL_SCRIPT)
    validate_shell_script_extension(${INSTALL_SCRIPT})
    set_shell_program(${INSTALL_SCRIPT})
    execute_process(COMMAND ${SCRIPT_RUNNER} ${SCRIPT_ARG} ${INSTALL_SCRIPT} ${PROJECT_SOURCE_DIR})
endmacro(download_file)
